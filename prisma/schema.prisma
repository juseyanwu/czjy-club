generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model events {
  id            String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title         String                @db.VarChar(255)
  date          DateTime              @db.Date
  location      String                @db.VarChar(255)
  description   String?
  organizer_id  String                @db.Uuid
  created_at    DateTime?             @default(now()) @db.Timestamptz(6)
  image_url     String?
  registrations event_registrations[]
  organizer     users                 @relation(fields: [organizer_id], references: [id])
}

model tasks {
  id          String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String          @db.VarChar(255)
  description String?
  location    String?         @db.VarChar(255)
  due_date    DateTime?       @db.Date
  status      TaskStatus      @default(NOT_STARTED)
  created_at  DateTime        @default(now()) @db.Timestamptz(6)
  updated_at  DateTime        @updatedAt @db.Timestamptz(6)
  creator_id  String          @db.Uuid
  assignee_id String?         @db.Uuid
  comments    task_comments[]
  logs        task_logs[]
  assignee    users?          @relation("TaskAssignee", fields: [assignee_id], references: [id])
  creator     users           @relation("TaskCreator", fields: [creator_id], references: [id])
}

model task_comments {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id    String   @db.Uuid
  user_id    String   @db.Uuid
  content    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  task       tasks    @relation(fields: [task_id], references: [id], onDelete: Cascade)
  user       users    @relation(fields: [user_id], references: [id])
}

model task_logs {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id    String      @db.Uuid
  user_id    String      @db.Uuid
  old_status TaskStatus?
  new_status TaskStatus
  message    String?
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  task       tasks       @relation(fields: [task_id], references: [id], onDelete: Cascade)
  user       users       @relation(fields: [user_id], references: [id])
}

model posts {
  id         String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content    String
  image_urls String[]
  author_id  String          @db.Uuid
  created_at DateTime        @default(now()) @db.Timestamptz(6)
  updated_at DateTime        @updatedAt @db.Timestamptz(6)
  likes      post_likes[]
  comments   post_comments[]
  author     users           @relation(fields: [author_id], references: [id])
}

model post_likes {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id    String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  post       posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       users    @relation(fields: [user_id], references: [id])

  @@unique([post_id, user_id])
}

model post_comments {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id    String   @db.Uuid
  user_id    String   @db.Uuid
  content    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  post       posts    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       users    @relation(fields: [user_id], references: [id])
}

model users {
  id             String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String                @db.VarChar(255)
  email          String                @unique
  password       String
  role           String                @default("user")
  registrations  event_registrations[]
  events         events[]
  task_comments  task_comments[]
  task_logs      task_logs[]
  assigned_tasks tasks[]               @relation("TaskAssignee")
  created_tasks  tasks[]               @relation("TaskCreator")
  posts          posts[]
  post_likes     post_likes[]
  post_comments  post_comments[]
}

model event_registrations {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_id   String   @db.Uuid
  user_id    String   @db.Uuid
  status     String   @default("registered")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  event      events   @relation(fields: [event_id], references: [id])
  user       users    @relation(fields: [user_id], references: [id])

  @@unique([event_id, user_id])
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
